<?php
/**
 * 啦啦外卖 - 做好用的外卖系统!
 * =========================================================
 * Copy right 2015-2038 太原多讯网络科技有限公司, 保留所有权利。
 * ----------------------------------------------
 * 官方网址: http://www.duoxunwl.com/
 * 这不是一个自由软件！您只能在不用于商业目的的前提下对程序代码进行修改和使用。
 * 任何企业和个人不允许对程序代码以任何形式任何目的再发布。
 * =========================================================
 * @author : 啦啦外卖团队
 * @客服QQ : 2622178042
 */
defined('IN_IA') or exit('Access Denied');
function icheckdeliveryer() {
	global $_W, $_GPC;
	$_W['deliveryer'] = array();
	if(is_weixin() && !defined('IN_WXAPP')) {
		if(!empty($_W['openid'])) {
			$deliveryer = deliveryer_fetch($_W['openid'], 'openid');
	}
	}
	elseif(defined('IN_WXAPP')) {
		$token = trim($_GPC['token']);
		if(!empty($token)) {
			$deliveryer = deliveryer_fetch($token, 'token');
		}
	}
	if(!empty($deliveryer)) {
		$_W['deliveryer'] = $deliveryer;
	}
	if(empty($_W['deliveryer'])) {
		$key = "we7_wmall_deliveryer_session_{$_W['uniacid']}";
		if(isset($_GPC[$key])) {
			$session = json_decode(base64_decode($_GPC[$key]), true);
			if(is_array($session)) {
				$deliveryer = deliveryer_fetch($session['id'], 'id');
				if(is_array($deliveryer) && ($session['hash'] == $deliveryer['password'])) {
					$_W['deliveryer'] = $deliveryer;
				} else {
					isetcookie($key, false, -100);
				}
			} else {
				isetcookie($key, false, -100);
			}
		}
	}
	if(!empty($_W['deliveryer'])) {
		if(empty($_W['deliveryer']['openid_wxapp']) && !empty($_W['deliveryer']['openid'])) {
			$openid_wxapp = member_openid2wxapp($_W['deliveryer']['openid']);
			if(!empty($openid_wxapp)) {
				$_W['deliveryer']['openid_wxapp'] = $openid_wxapp;
				pdo_update('tiny_wmall_deliveryer', array('openid_wxapp' => $openid_wxapp), array('id' => $_W['deliveryer']['id']));
			}
		}
		if(!empty($_W['deliveryer']['openid_wxapp']) && empty($_W['deliveryer']['openid'])) {
			$openid = member_wxapp2openid($_W['deliveryer']['openid_wxapp']);
			if(!empty($openid)) {
				$_W['deliveryer']['openid'] = $openid;
				pdo_update('tiny_wmall_deliveryer', array('openid' => $openid), array('id' => $_W['deliveryer']['id']));
			}
		}
		$_W['openid'] = $_W['deliveryer']['openid'];
		$_W['openid_wxapp'] = $_W['deliveryer']['openid_wxapp'];

		$sids = pdo_fetchall('select sid from ' . tablename('tiny_wmall_store_deliveryer') . ' where uniacid = :uniacid and deliveryer_id = :deliveryer_id and sid > 0', array(':uniacid' => $_W['uniacid'], ':deliveryer_id' => $_W['deliveryer']['id']), 'sid');
		$_W['deliveryer']['sids'] = array_unique(array_keys($sids));
		$_W['deliveryer']['sids_sn'] = implode(',', $_W['deliveryer']['sids']);
		//外卖单配送权限，0：无权限，1：平台外卖单，2：店内外卖单，3：平台外卖单和店内外卖单
		$_W['deliveryer']['perm_takeout'] = $_W['deliveryer']['is_takeout'];
		if(!empty($_W['deliveryer']['sids'])) {
			$_W['deliveryer']['perm_takeout'] = 2;
			if($_W['deliveryer']['is_takeout'] == 1) {
				$_W['deliveryer']['perm_takeout'] = 3;
			}
		}
		$_W['deliveryer']['perm_errander'] = $_W['deliveryer']['is_errander'];
		$_W['deliveryer']['perm_plateform'] = $_W['deliveryer']['is_errander'] || $_W['deliveryer']['is_takeout'];
		return true;
	}
	if(defined('IN_WXAPP')) {
		imessage(error(41009, '请先登录'), '', 'ajax');
	} else {
		if($_W['ispost']) {
			imessage(error(-1, '请先登录'), imurl('delivery/auth/login', array('force' => 1)), 'ajax');
		}
		header("location: " . imurl('delivery/auth/login', array('force' => 1)), true);
		exit;
	}
}

//获取平台的所有配送员
function deliveryer_all($force_update = false) {
	global $_W;
	$cache_key = "we7_wmall:deliveryers:{$_W['uniacid']}:{$_W['agentid']}";
	$data = cache_read($cache_key);
	if(!empty($data) && !$force_update) {
		return $data;
	}
	$condition = " WHERE uniacid = :uniacid";
	$params = array(':uniacid' => $_W['uniacid']);
	if($_W['agentid'] > 0) {
		$condition .= ' and agentid = :agentid';
		$params[':agentid'] = $_W['agentid'];
	}
	$deliveryers = pdo_fetchall('select * from ' . tablename('tiny_wmall_deliveryer') . $condition, $params, 'id');
	cache_write($cache_key, $deliveryers);
	return $deliveryers;
}

function deliveryer_fetch($value, $field = 'id') {
	global $_W;
	$deliveryer = pdo_get('tiny_wmall_deliveryer', array('uniacid' => $_W['uniacid'], $field => trim($value)));
	if(!empty($deliveryer)) {
		if(empty($deliveryer['token'])) {
			$deliveryer['token'] = random(32);
			pdo_update('tiny_wmall_deliveryer', array('token' => $deliveryer['token']), array('id' => $deliveryer['id']));
		}
		if(empty($deliveryer['openid_wxapp']) && !empty($deliveryer['openid'])) {
			mload()->model('member');
			$openid_wxapp = member_openid2wxapp($deliveryer['openid']);
			if(!empty($openid_wxapp)) {
				$deliveryer['openid_wxapp'] = $openid_wxapp;
				pdo_update('tiny_wmall_deliveryer', array('openid_wxapp' => $openid_wxapp), array('id' => $deliveryer['id']));
			}
		}
		if(!empty($deliveryer['openid_wxapp']) && empty($deliveryer['openid'])) {
			mload()->model('member');
			$openid = member_wxapp2openid($deliveryer['openid_wxapp']);
			if(!empty($openid)) {
				$deliveryer['openid'] = $openid;
				pdo_update('tiny_wmall_deliveryer', array('openid' => $openid), array('id' => $deliveryer['id']));
			}
		}
		$deliveryer['extra'] = iunserializer($deliveryer['extra']);
		if(empty($deliveryer['extra'])) {
			$deliveryer['extra'] = array(
				'accept_wechat_notice' => 1,
				'accept_voice_notice' => 1,
			);
		}
		$deliveryer['perm_transfer'] = iunserializer($deliveryer['perm_transfer']);
		$deliveryer['perm_cancel'] = iunserializer($deliveryer['perm_cancel']);
		$deliveryer['fee_delivery'] = iunserializer($deliveryer['fee_delivery']);
		$deliveryer['fee_getcash'] = iunserializer($deliveryer['fee_getcash']);
		if(empty($deliveryer['fee_getcash']) || !isset($deliveryer['fee_getcash']['get_cash_fee_limit'])) {
			$deliveryer['fee_getcash'] = array(
				'get_cash_fee_limit' => 1,
				'get_cash_fee_rate' => 0,
				'get_cash_fee_min' => 0,
				'get_cash_fee_max' => 0,
				'get_cash_period' => 0,
			);
		}
		$tips = array(
			'0' => '休息中',
			'1' => '接单中',
		);
		$deliveryer['work_status_cn'] = $tips[$deliveryer['work_status']];
	}
	return $deliveryer;
}

function deliveryer_order_stat($sid, $deliveryer_id) {
	global $_W;
	$stat = array();
	$today_starttime = strtotime(date('Y-m-d'));
	$yesterday_starttime = $today_starttime - 86400;
	$month_starttime = strtotime(date('Y-m'));
	$stat['yesterday_num'] = intval(pdo_fetchcolumn('select count(*) from ' . tablename('tiny_wmall_order') . ' where uniacid = :uniacid and sid = :sid and deliveryer_id = :deliveryer_id and delivery_type = 1 and status =5 and addtime >= :starttime and addtime <= :endtime', array(':uniacid' => $_W['uniacid'], ':sid' => $sid, ':deliveryer_id' => $deliveryer_id, ':starttime' => $yesterday_starttime, ':endtime' => $today_starttime)));
	$stat['today_num'] = intval(pdo_fetchcolumn('select count(*) from ' . tablename('tiny_wmall_order') . ' where uniacid = :uniacid and sid = :sid and deliveryer_id = :deliveryer_id and delivery_type = 1 and status =5 and addtime >= :starttime', array(':uniacid' => $_W['uniacid'], ':sid' => $sid, ':deliveryer_id' => $deliveryer_id, ':starttime' => $today_starttime)));
	$stat['month_num'] = intval(pdo_fetchcolumn('select count(*) from ' . tablename('tiny_wmall_order') . ' where uniacid = :uniacid and sid = :sid and deliveryer_id = :deliveryer_id and delivery_type = 1 and status =5 and addtime >= :starttime', array(':uniacid' => $_W['uniacid'], ':sid' => $sid, ':deliveryer_id' => $deliveryer_id, ':starttime' => $month_starttime)));
	$stat['total_num'] = intval(pdo_fetchcolumn('select count(*) from ' . tablename('tiny_wmall_order') . ' where uniacid = :uniacid and sid = :sid and deliveryer_id = :deliveryer_id and delivery_type = 1 and status =5', array(':uniacid' => $_W['uniacid'], ':sid' => $sid, ':deliveryer_id' => $deliveryer_id)));
	return $stat;
}

function deliveryer_plateform_order_stat($deliveryer_id) {
	global $_W;
	$stat = array();
	$today_starttime = strtotime(date('Y-m-d'));
	$yesterday_starttime = $today_starttime - 86400;
	$month_starttime = strtotime(date('Y-m'));
	$stat['yesterday_num'] = intval(pdo_fetchcolumn('select count(*) from ' . tablename('tiny_wmall_order') . ' where uniacid = :uniacid and deliveryer_id = :deliveryer_id and delivery_type = 2 and status =5 and addtime >= :starttime and addtime <= :endtime', array(':uniacid' => $_W['uniacid'], ':deliveryer_id' => $deliveryer_id, ':starttime' => $yesterday_starttime, ':endtime' => $today_starttime)));
	$stat['today_num'] = intval(pdo_fetchcolumn('select count(*) from ' . tablename('tiny_wmall_order') . ' where uniacid = :uniacid and deliveryer_id = :deliveryer_id and delivery_type = 2 and status =5 and addtime >= :starttime', array(':uniacid' => $_W['uniacid'], ':deliveryer_id' => $deliveryer_id, ':starttime' => $today_starttime)));
	$stat['month_num'] = intval(pdo_fetchcolumn('select count(*) from ' . tablename('tiny_wmall_order') . ' where uniacid = :uniacid and deliveryer_id = :deliveryer_id and delivery_type = 2 and status =5 and addtime >= :starttime', array(':uniacid' => $_W['uniacid'], ':deliveryer_id' => $deliveryer_id, ':starttime' => $month_starttime)));
	$stat['total_num'] = intval(pdo_fetchcolumn('select count(*) from ' . tablename('tiny_wmall_order') . ' where uniacid = :uniacid and deliveryer_id = :deliveryer_id and delivery_type = 2 and status =5', array(':uniacid' => $_W['uniacid'], ':deliveryer_id' => $deliveryer_id)));
	return $stat;
}

function deliveryer_update_credit2($deliveryer_id, $fee, $trade_type, $extra, $remark = '', $order_type = 'order') {
	global $_W;
	//$trade_type 1: 订单入账, 2: 申请提现, 3: 其他变动
	$deliveryer = pdo_get('tiny_wmall_deliveryer', array('uniacid' => $_W['uniacid'], 'id' => $deliveryer_id));
	if(empty($deliveryer)) {
		return error(-1, '账户不存在');
	}
	if($trade_type == 1 && !empty($extra)) {
		$is_exist = pdo_get('tiny_wmall_deliveryer_current_log', array('uniacid' => $_W['uniacid'], 'deliveryer_id' => $deliveryer_id, 'trade_type' => 1, 'extra' => $extra, 'order_type' => $order_type), array('id'));
		if($is_exist) {
			return error(-1, '订单已经入账');
		}
	}
	$now_amount = $deliveryer['credit2'] + $fee;
	pdo_update('tiny_wmall_deliveryer', array('credit2' => $now_amount), array('uniacid' => $_W['uniacid'], 'id' => $deliveryer_id));
	$log = array(
		'uniacid' => $_W['uniacid'],
		'agentid' => $deliveryer['agentid'],
		'deliveryer_id' => $deliveryer_id,
		'order_type' => $order_type,
		'trade_type' => $trade_type,
		'extra' => $extra,
		'fee' => $fee,
		'amount' => $now_amount,
		'addtime' => TIMESTAMP,
		'stat_month' => date('Ym', TIMESTAMP),
		'remark' => $remark
	);
	pdo_insert('tiny_wmall_deliveryer_current_log', $log);
	return true;
}

//配送员app函数
function deliveryer_login($mobile, $password) {
	global $_W, $_GPC;
	$deliveryer = pdo_get('tiny_wmall_deliveryer', array('uniacid' => $_W['uniacid'], 'mobile' => $mobile));
	if(empty($deliveryer)) {
		return ierror(-1, '账号不存在');
	}
	$password = md5(md5($deliveryer['salt'] . $password) . $deliveryer['salt']);
	if($password != $deliveryer['password']) {
		return ierror(-1, '密码错误');
	}
	if(!empty($_GPC['registration_id']) && $deliveryer['registration_id'] != $_GPC['registration_id']) {
		pdo_update('tiny_wmall_deliveryer', array('registration_id' => $_GPC['registration_id']), array('uniacid' => $_W['uniacid'], 'id' => $deliveryer['id']));
	}
	if(empty($deliveryer['token'])) {
		$token = $deliveryer['token'] = random(32);
		pdo_update('tiny_wmall_deliveryer', array('token' => $token), array('uniacid' => $_W['uniacid'], 'id' => $deliveryer['id']));
	}

	return ierror(0, '调用成功', $deliveryer);
}

function deliveryer_order_num_update($deliveryer_id) {
	global $_W;
	$deliveryer = pdo_get('tiny_wmall_deliveryer', array('uniacid' => $_W['uniacid'], 'id' => $deliveryer_id), array('id'));
	if(empty($deliveryer)) {
		return error(-1, '配送员不存在');
	}
	$params = array(
		':uniacid' => $_W['uniacid'],
		':deliveryer_id' => $deliveryer_id,
	);
	$takeout_num = pdo_fetchcolumn('select count(*) from ' . tablename('tiny_wmall_order') . ' where uniacid = :uniacid and deliveryer_id = :deliveryer_id and (delivery_status = 7 or delivery_status = 4 or delivery_status = 8) and status < 5', $params);
	$update = array(
		'order_takeout_num' => intval($takeout_num),
	);
	if(check_plugin_perm('errander')) {
		$errander_num = pdo_fetchcolumn('select count(*) from ' . tablename('tiny_wmall_errander_order') . ' where uniacid = :uniacid and deliveryer_id = :deliveryer_id and (delivery_status = 2 or delivery_status = 3) and status < 3', $params);
		$update['order_errander_num'] = intval($errander_num);
	}
	pdo_update('tiny_wmall_deliveryer', $update, array('uniacid' => $_W['uniacid'], 'id' => $deliveryer['id']));
	return true;
}

function sys_notice_deliveryer_settle($deliveryer_id, $note = '') {
	global $_W;
	$deliveryer = pdo_get('tiny_wmall_deliveryer', array('uniacid' => $_W['uniacid'], 'id' => $deliveryer_id));
	if(empty($deliveryer)) {
		return error(-1, '配送员不存在');
	}
	$maneger = $_W['we7_wmall']['config']['manager'];
	if(empty($maneger['openid'])) {
		return error(-1, '平台管理员信息不存在');
	}
	$tips = "尊敬的【{$maneger['nickname']}】，有新的配送员提交了入驻请求。请登录电脑进行权限分配";
	$remark = array(
		"性别 : {$deliveryer['sex']}",
		"年龄 : {$deliveryer['age']}",
		"申请人手机号: {$deliveryer['mobile']}",
		$note
	);
	$remark = implode("\n", $remark);
	$send = array(
		'first' => array(
			'value' => $tips,
			'color' => '#ff510'
		),
		'keyword1' => array(
			'value' => $deliveryer['title'],
			'color' => '#ff510'
		),
		'keyword2' => array(
			'value' => $deliveryer['title'],
			'color' => '#ff510'
		),
		'keyword3' => array(
			'value' => date('Y-m-d H:i', time()),
			'color' => '#ff510',
		),
		'remark' => array(
			'value' => $remark,
			'color' => '#ff510'
		),
	);
	$acc = WeAccount::create($_W['acid']);
	$status = $acc->sendTplNotice($maneger['openid'], $_W['we7_wmall']['config']['notice']['wechat']['settle_apply_tpl'], $send);
	if(is_error($status)) {
		slog('wxtplNotice', '平台配送员入驻微信通知平台管理员', $send, $status['message']);
	}
	return $status;
}

function to_workstatus($status, $key = 'all') {
	$data = array(
		'1' => array(
			'css' => 'label label-success',
			'text' => '接单中',
		),
		'0' => array(
			'css' => 'label label-danger',
			'text' => '休息中',
		),
	);
	if($key == 'all') {
		return $data[$status];
	} elseif($key == 'css') {
		return $data[$status]['css'];
	} elseif($key == 'text') {
		return $data[$status]['text'];
	}
}

function deliveryer_work_status_set($deliveryer_id, $status, $jpush = false, $notify = false) {
	global $_W;
	$tips = array(
		'0' => '休息中',
		'1' => '接单中',
	);
	$status = intval($status);
	if(!in_array($status, array_keys($tips))) {
		return error(-1, '工作状态有误');
	}
	pdo_update('tiny_wmall_deliveryer', array('work_status' => $status), array('uniacid' => $_W['uniacid'], 'id' => $deliveryer_id));
	$data = array(
		'work_status' => $status,
		'work_status_cn' => $tips[$status]
	);
	if($jpush) {
		if(!empty($deliveryer['registration_id'])) {
			mload()->model('jpush');
			$deliveryer = pdo_get('tiny_wmall_deliveryer', array('uniacid' => $_W['uniacid'], 'id' => $deliveryer_id));
			$original = jpush_get_devices($deliveryer['registration_id']);
			if(is_error($original)) {
				return $original;
			}
			$relation = deliveryer_push_token($deliveryer);
			$result = jpush_update_devices($deliveryer['registration_id'], $original, $relation);
			if(is_error($result)) {
				return $result;
			}
		}
	}
	if($notify) {
		deliveryer_notice('work_status_change', $deliveryer_id);
	}
	return $data;
}

function deliveryer_notice($type, $audience = 0, $extra = array()) {
	global $_W;
	$acc = WeAccount::create($_W['uniacid']);
	if($audience > 0) {
		$deliveryers[] = $deliveryer = deliveryer_fetch($audience);
	}
	if($type == 'work_status_change') {
		$title = "您好,{$deliveryer['title']}。平台管理员已将您的工作状态设置为{$deliveryer['work_status_cn']},如有疑问,请联系平台管理员";
		$url = imurl('delivery/member/mine', array(), true);
		$send = tpl_format($title, '******', '******', '');
		$status = $acc->sendTplNotice($deliveryer['openid'], $_W['we7_wmall']['config']['notice']['wechat']['public_tpl'], $send, $url);
		if(is_error($status)) {
			slog('wxtplNotice', "工作状态变动微信通知配送员:{$deliveryer['title']}", $send, $status['message']);
		}
		if(!empty($deliveryer['token'])) {
			$audience = array(
				'alias' => array($deliveryer['token'])
			);
			Jpush_deliveryer_send('工作状态变更通知', $title, array('voice_text' => $title, 'notify_type' => 'work_status_change', 'voice_play_nums' => 1, 'redirect_type' => 'work_status_change', 'work_status' => $deliveryer['work_status']), $audience);
		}
		if(!empty($deliveryer['mobile']) && $deliveryer['extra']['accept_voice_notice'] == 1) {
			mload()->model('sms');
			$data = sms_singlecall($deliveryer['mobile'], array('name' => $deliveryer['title'], 'work_status_cn' => $deliveryer['work_status_cn']), 'work_status_change');
			if(is_error($data)) {
				slog('alidayuCall', "工作状态变动阿里大鱼语音通知配送员:{$deliveryer['title']}", array('name' => $deliveryer['title'], 'work_status_cn' => $deliveryer['work_status_cn']), $data['message']);
			}
		}
	}
	return true;
}


function deliveryer_push_token($deliveryerOrid) {
	global $_W;
	$deliveryer = $deliveryerOrid;
	if(!is_array($deliveryer)) {
		$deliveryer = pdo_get('tiny_wmall_deliveryer', array('uniacid' => $_W['uniacid'], 'id' => $deliveryer));
	}
	if(empty($deliveryer)) {
		return error(-1, '配送员不存在');
	}
	if(empty($deliveryer['token'])) {
		$deliveryer['token'] = random(32);
		pdo_update('tiny_wmall_deliveryer', array('token' => $deliveryer['token']), array('id' => $deliveryer['id']));
	}

	$config = $_W['we7_wmall']['config']['app']['deliveryer'];
	$relation = array(
		'alias' => $deliveryer['token'],
		'tags' => array(),
		'mobile' => $deliveryer['mobile']
	);
	$relation['tags'][] = $config['serial_sn'];
	if($deliveryer['work_status'] == 1) {
		$relation['tags'][] = $config['push_tags']['working'];
	} else {
		$relation['tags'][] = $config['push_tags']['rest'];
	}
	if($deliveryer['agentid'] > 0) {
		$config = get_agent_system_config('app.deliveryer', $deliveryer['agentid']);
		if(empty($config['push_tags'])) {
			$config['push_tags'] = array(
				'all' => random(8),
				'working' => random(8),
				'rest' => random(8),
			);
			set_agent_system_config('app.deliveryer', $config, $deliveryer['agentid']);
		}
		$relation['tags'][] = $config['push_tags']['all'];
		if($deliveryer['work_status'] == 1) {
			$relation['tags'][] = $config['push_tags']['working'];
		} else {
			$relation['tags'][] = $config['push_tags']['rest'];
		}
	}
	return $relation;
}

function deliveryer_set_extra($type, $value, $deliveryer_id = 0) {
	global $_W;
	if(empty($deliveryer_id)) {
		$deliveryer_id = $_W['deliveryer']['id'];
	}
	$data = pdo_get('tiny_wmall_deliveryer', array('uniacid' => $_W['uniacid'], 'id' => $deliveryer_id), array('id', 'extra'));
	if(!empty($data)) {
		if(empty($data['extra'])){
			if($type == 'accept_wechat_notice') {
				$extra[$type] = $value;
				$extra['accept_voice_notice'] = 0;
			}
			if($type == 'accept_voice_notice') {
				$extra['accept_wechat_notice'] = 0;
				$extra[$type] = $value;
			}
		} else {
			$extra = iunserializer($data['extra']);
			$extra[$type] = $value;
		}
		$update = array(
			'extra' => iserializer($extra),
		);
		pdo_update('tiny_wmall_deliveryer', $update, array('uniacid' => $_W['uniacid'], 'id' => $deliveryer_id));
	}
	return true;
}

function deliveryer_getcash_transfers($id) {
	global $_W;
	$id = intval($id);
	$log = pdo_get('tiny_wmall_deliveryer_getcash_log', array('uniacid' => $_W['uniacid'], 'id' => $id));
	if(empty($log)) {
		return error(-1, '提现记录不存在');
	}
	$log['account'] = iunserializer($log['account']);
	if(!is_array($log['account'])) {
		$log['account'] = array();
	}
	if($log['status'] == 1) {
		return error(-1, '该提现记录已处理');
	}
	$deliveryer = pdo_get('tiny_wmall_deliveryer', array('uniacid' => $_W['uniacid'], 'id' => $log['deliveryer_id']));
	if(empty($deliveryer) || empty($deliveryer['title']) || empty($deliveryer['openid'])) {
		return error(-1, '配送员微信信息不完善,无法进行微信付款');
	}
	$params = array(
		'partner_trade_no' => $log['trade_no'],
		'openid' => !empty($log['account']['openid']) ? $log['account']['openid'] : $deliveryer['openid'],
		'check_name' => 'FORCE_CHECK',
		're_user_name' => $deliveryer['title'],
		'amount' => $log['final_fee'] * 100,
		'desc' => "{$deliveryer['title']}" . date('Y-m-d H:i', $log['addtime']) . "配送费提现申请"
	);
	mload()->classs('wxpay');
	if($log['channel'] == 'wxapp') {
		$params['openid'] = !empty($log['account']['openid_wxapp']) ? $log['account']['openid_wxapp'] : $deliveryer['openid_wxapp'];
		if(empty($params['openid'])) {
			return error(-1, "模块版本为小程序版。未获取到配送员针对小程序的openid");
		}
		$pay = new WxPay('wxapp');
	} else {
		$pay = new WxPay();
	}

	$response = $pay->mktTransfers($params);
	if(is_error($response)) {
		return error(-1, "打款未成功，等待管理员处理。详细错误信息：{$response['message']}");
	}
	if($_W['is_agent'] && $deliveryer['agentid'] > 0) {
		mload()->model('agent');
		agent_update_account($deliveryer['agentid'], $log['take_fee'], 3, '', '配送员提现收取手续费','');
	}
	pdo_update('tiny_wmall_deliveryer_getcash_log', array('status' => 1, 'endtime' => TIMESTAMP), array('uniacid' => $_W['uniacid'], 'id' => $id));
	sys_notice_deliveryer_getcash($log['deliveryer_id'], $id, 'success');
	return error(0, '打款成功');
}

function deliveryer_getcash_config() {
	global $_W;
	$config = $_W['we7_wmall']['config']['delivery']['cash'];
	if(empty($config)) {
		$config = array(
			'get_cash_fee_limit' => 1,
			'get_cash_fee_rate' => 0,
			'get_cash_fee_min' => 0,
			'get_cash_fee_max' => 0,
			'get_cash_period' => 0,
		);
	}
	return $config;
}

function deliveryer_stat_order() {
	global $_W, $_GPC;
	$type = trim($_GPC['type']);
	if(empty($type)) {
		return error(-1, '请选择统计日期');
	}
	$condition = ' where uniacid = :uniacid and deliveryer_id = :deliveryer_id';
	$params = array(
		':uniacid' => $_W['uniacid'],
		':deliveryer_id' => $_W['deliveryer']['id'],
	);
	if($type == 'today') {
		$condition .= ' and stat_day = :stat_day';
		$params[':stat_day'] = date('Ymd');
		$starttime = date('Y-m-d 00:00');
		$endtime = date('Y-m-d 23:59');
	} elseif($type == 'yesterday') {
		$condition .= ' and stat_day = :stat_day';
		$params[':stat_day'] = date('Ymd', strtotime("-1 day"));
		$starttime = date('Y-m-d 00:00', strtotime("-1 day"));
		$endtime = date('Y-m-d 23:59', strtotime("-1 day"));
	} elseif($type == 'month') {
		$condition .= ' and stat_month = :stat_month';
		$params[':stat_month'] = date('Ym');
		$starttime = date("Y-m-d H:i", mktime( 0, 0, 0, date('m'), 1, date('Y')));
		$endtime = date("Y-m-d H:i", mktime( 23, 59, 59, date('m'), date ('t'), date ('Y')));
	} elseif($type == 'last_month') {
		$condition .= ' and stat_month = :stat_month';
		$params[':stat_month'] = date("Ym", strtotime("last month"));
		$starttime = date('Y-m-01 00:00',strtotime('-1 month'));
		$endtime = date("Y-m-d 23:59", strtotime(-date('d').'day'));
	} elseif($type == 'week') {
		$condition = ' stat_day >= :start_day and stat_day <= :end_day';
		$params[':start_day'] = date('Y') . date('m') . (date('d') - date('w'));
		$params[':end_day'] = date('Y') . date('m'). (date('d') - date('w') + 6);
		$starttime = date('Y-m-d 00:00', strtotime($params[':start_day']));
		$endtime = date("Y-m-d 23:59", strtotime($params[':end_day']));
	} elseif($type == 'custom') {
		$start = trim($_GPC['start']);
		$end = trim($_GPC['end']);
		if(empty($start) || empty($end)) {
			return error(-1, '请选择日期');
		}
		$starttime = strtotime($start);
		$endtime = strtotime($end) + 86399;
		$condition = ' stat_day >= :start_day and stat_day <= :end_day';
		$params[':start_day'] = date('Ymd', $starttime);
		$params[':end_day'] = date('Ymd', $endtime);
		$starttime = date('Y-m-d 00:00', strtotime($start));
		$endtime = date('Y-m-d 23:59', strtotime($end));
	}
	$condition_takeout = "{$condition} and delivery_type = 2";
	$takeout = pdo_fetchall('select plateform_deliveryer_fee,status from ' . tablename('tiny_wmall_order') . $condition_takeout, $params);
	$errander = pdo_fetchall('select deliveryer_total_fee, status from ' . tablename('tiny_wmall_errander_order') . $condition, $params);
	$stat = array(
		'takeout' => array(
			'total_num' => 0,
			'fee' => 0,//成功订单
			'num' => 0,//成功订单
			'cancel_num' => 0,
		),
		'errander' => array(
			'total_num' => 0,
			'fee' => 0,
			'num' => 0,
			'cancel_num' => 0,
		),
		'total' => array(
			'num' => 0,
			'fee' => 0,
		),
		'time' => array(
			'start' => $starttime,
			'end' => $endtime,
		)
	);
	foreach($takeout as $val) {
		$stat['takeout']['total_num']++;
		if($val['status'] == 5) {
			$stat['takeout']['num']++;
			$stat['takeout']['fee'] += $val['plateform_deliveryer_fee'];
		} elseif($val['status'] == 6) {
			$stat['takeout']['cancel_num']++;
		}
	}
	foreach($errander as $val) {
		$stat['errander']['total_num']++;
		if($val['status'] == 3) {
			$stat['errander']['num']++;
			$stat['errander']['fee'] += $val['deliveryer_total_fee'];
		} elseif($val['status'] == 4) {
			$stat['errander']['cancel_num']++;
		}
	}
	return $stat;
}

function deliveryer_takeout_rank($extra) {
	global $_W, $_GPC;
	if(!is_array($extra) || empty($extra['type'])) {
		return error(-1, '请选择统计时间');
	}
	$config_takeout = $_W['we7_wmall']['config']['takeout']['order'];
	$config_takeout['delivery_timeout_limit'] = intval($config_takeout['delivery_timeout_limit']);
	if(empty($config_takeout['delivery_timeout_limit'])) {
		$config_takeout['delivery_timeout_limit'] = 45;
	}
	$type = trim($extra['type']);
	$deliveryer_id = intval($extra['deliveryer_id']);
	$condition = " where uniacid = :uniacid and agentid = :agentid and status = 5 and delivery_type = 2 and deliveryer_id != 0 and order_type <= 2";
	$params = array(
		':uniacid' => $_W['uniacid'],
		':agentid' => $_W['agentid']
	);

	//$type = trim($_GPC['type']) ? trim($_GPC['type']) : 'today';
	if($type == 'today') {
		$condition .= ' and stat_day = :today';
		$params[':today'] = date('Ymd');
	} elseif($type == 'yesterday') {
		$condition .= ' and stat_day = :yesterday';
		$params[':yesterday'] = date('Ymd', strtotime("-1 day"));
	} elseif($type == 'week') {
/*		$condition .= ' and stat_week = :week';
		$params[':week'] = date('W');*/
		$condition = ' stat_day >= :start_day and stat_day <= :end_day';
		$params[':start_day'] = date('Y') . date('m') . (date('d') - date('w'));
		$params[':end_day'] = date('Y') . date('m'). (date('d') - date('w') + 6);
	} elseif($type == 'month') {
		$condition .= ' and stat_month = :month';
		$params[':month'] = date('Ym');
	} elseif($type == 'last_month') {
		$condition .= ' and stat_month = :last_month';
		$params[':last_month'] = date("Ym", strtotime("last month"));
	} elseif($type == 'custom') {
		$start = trim($_GPC['start']);
		$end = trim($_GPC['end']);
		if(empty($start) || empty($end)) {
			message(ierror(-1, '请选择日期'), '', 'ajax');
		}
		$starttime = strtotime($start);
		$endtime = strtotime($end) + 86399;
		$condition .= ' and endtime >= :starttime and endtime <= :endtime';
		$params[':starttime'] = $starttime;
		$params[':endtime'] = $endtime;
	}

	$records_temp = pdo_fetchall('SELECT
		stat_day,
		deliveryer_id,
		count(*) as total_success_order,
		round(avg(delivery_success_time - delivery_instore_time) / 60, 2) as avg_delivery_success_time
	 FROM ' . tablename('tiny_wmall_order') . " {$condition} group by deliveryer_id", $params, 'deliveryer_id');

	$condition_timeout = "{$condition} and (endtime - clerk_notify_collect_time > {$config_takeout['delivery_timeout_limit']} * 60)";
	$records_timeout = pdo_fetchall('SELECT
		stat_day,
		deliveryer_id,
		count(*) as total_timeout_order
	 FROM ' . tablename('tiny_wmall_order') . " {$condition_timeout} group by deliveryer_id", $params, 'deliveryer_id');

	$basic = array(
		'total_success_order' => '0',
		'total_timeout_order' => '0',
		'percent_timeout' => '0',
		'percent_timeout_cn' => '0%',
		'percent_normal' => '0',
		'percent_normal_cn' => '0%',
		'avg_delivery_success_time' => '0'
	);
	$records = array();
	$deliveryers = deliveryer_fetchall(0, array('work_status' => -1, 'over_max_collect_show' => 1));
	foreach($deliveryers as $item) {
		$i = $item['id'];
		$records_temp[$i] = empty($records_temp[$i]) ? array() : $records_temp[$i];
		$records_timeout[$i] = empty($records_timeout[$i]) ? array() : $records_timeout[$i];
		$data= array_merge($basic, $records_timeout[$i], $records_temp[$i]);
		if(!empty($data['total_success_order'])) {
			$data['percent_timeout'] = round($data['total_timeout_order'] / $data['total_success_order'], 2) * 100;
			$data['percent_timeout'] = "{$data['percent_timeout']}";
			$data['percent_timeout_cn'] = "{$data['percent_timeout']}%";
			$data['percent_normal'] = round(($data['total_success_order'] - $data['total_timeout_order']) / $data['total_success_order'], 2) * 100;
			$data['percent_normal'] = "{$data['percent_normal']}";
			$data['percent_normal_cn'] = "{$data['percent_normal']}%";
		}
		$data['title'] = $item['title'];
		$data['avatar'] = tomedia($item['avatar']);
		if($i == $deliveryer_id) {
			$records_mine = $data;
		}
		$records[] = $data;
	}
	$sort_type = $extra['sort_type'];
	//$sort_type = trim($_GPC['sort_type']) ? trim($_GPC['sort_type']) : 'total_success_order';
	$orderby = SORT_DESC;
	if($sort_type == 'avg_delivery_success_time') {
		$orderby = SORT_ASC;
		foreach($records as $key => $item) {
			if(empty($item['avg_delivery_success_time'])) {
				$record_no_success_time[] = $item;
				unset($records[$key]);
			}
		}
	}
	//配送时长升序排序，没有数据的会排在前面， 没有数据的配送员是否显示在排行榜中
	$records = array_sort($records, $sort_type, $orderby);
	if($sort_type == 'avg_delivery_success_time') {
		$records = array_merge($records, $record_no_success_time);
	}
	$result['mine'] = $records_mine;
	$result['rank'] = $records;
	$rank = 0;
	$result['mine']['ranking'] = $rank;
	foreach($result['rank'] as $val) {
		$rank++;
		if($val['deliveryer_id'] == $deliveryer_id) {
			$result['mine']['ranking'] = $rank;
		}
	}
	return $result;
}

function deliveryer_errander_rank($extra) {
	global $_W, $_GPC;
	if(!is_array($extra) || empty($extra['type'])) {
		return error(-1, '请选择统计时间');
	}
	$config_errander = get_plugin_config('errander');
	$config_errander['delivery_timeout_limit'] = intval($config_errander['delivery_timeout_limit']);
	if(empty($config_errander['delivery_timeout_limit'])) {
		$config_errander['delivery_timeout_limit'] = 45;
	}
	$condition = " where uniacid = :uniacid and agentid = :agentid and status = 3 and deliveryer_id != 0";
	$params = array(
		':uniacid' => $_W['uniacid'],
		':agentid' => $_W['agentid']
	);
	$deliveryer_id = $extra['deliveryer_id'];
	$type = trim($extra['type']);
	//$type = trim($_GPC['type']) ? trim($_GPC['type']) : 'today';
	if($type == 'today') {
		$condition .= ' and stat_day = :today';
		$params[':today'] = date('Ymd');
	} elseif($type == 'yesterday') {
		$condition .= ' and stat_day = :yesterday';
		$params[':yesterday'] = date('Ymd', strtotime("-1 day"));
	} elseif($type == 'week') {
		$condition .= ' and stat_week = :week';
		$params[':week'] = date('w');
	} elseif($type == 'month') {
		$condition .= ' and stat_month = :month';
		$params[':month'] = date('Ym');
	} elseif($type == 'last_month') {
		$condition .= ' and stat_month = :last_month';
		$params[':last_month'] = date("Ym", strtotime("last month"));
	} elseif($type == 'custom') {
		$start = trim($_GPC['start']);
		$end = trim($_GPC['end']);
		if(empty($start) || empty($end)) {
			message(ierror(-1, '请选择日期'), '', 'ajax');
		}
		$starttime = strtotime($start);
		$endtime = strtotime($end) + 86399;
		$condition .= ' and endtime >= :starttime and endtime <= :endtime';
		$params[':starttime'] = $starttime;
		$params[':endtime'] = $endtime;
	}

	$records_temp = pdo_fetchall('SELECT
		stat_day,
		deliveryer_id,
		count(*) as total_success_order,
		round(avg(delivery_success_time - delivery_assign_time) / 60, 2) as avg_delivery_success_time
	 FROM ' . tablename('tiny_wmall_errander_order') . " {$condition} group by deliveryer_id", $params, 'deliveryer_id');

	$condition_timeout = "{$condition} and (delivery_success_time - delivery_assign_time > {$config_errander['delivery_timeout_limit']} * 60)";
	$records_timeout = pdo_fetchall('SELECT
		stat_day,
		deliveryer_id,
		count(*) as total_timeout_order
	 FROM ' . tablename('tiny_wmall_errander_order') . " {$condition_timeout} group by deliveryer_id", $params, 'deliveryer_id');

	$basic = array(
		'total_success_order' => '0',
		'total_timeout_order' => '0',
		'percent_timeout' => '0',
		'percent_timeout_cn' => '0%',
		'percent_normal' => '0',
		'percent_normal_cn' => '0%',
		'avg_delivery_success_time' => '0'
	);

	$records = array();
	$deliveryers = deliveryer_fetchall(0, array('work_status' => -1, 'order_type' => 'is_errander', 'over_max_collect_show' => 1));
	foreach($deliveryers as $item) {
		$i = $item['id'];
		$records_temp[$i] = empty($records_temp[$i]) ? array() : $records_temp[$i];
		$records_timeout[$i] = empty($records_timeout[$i]) ? array() : $records_timeout[$i];
		$data= array_merge($basic, $records_timeout[$i], $records_temp[$i]);
		if(!empty($data['total_success_order'])) {
			$data['percent_timeout'] = round($data['total_timeout_order'] / $data['total_success_order'], 2) * 100;
			$data['percent_timeout'] = "{$data['percent_timeout']}";
			$data['percent_timeout_cn'] = "{$data['percent_timeout']}%";
			$data['percent_normal'] = round(($data['total_success_order'] - $data['total_timeout_order']) / $data['total_success_order'], 2) * 100;
			$data['percent_normal'] = "{$data['percent_normal']}";
			$data['percent_normal_cn'] = "{$data['percent_normal']}%";
		}
		$data['title'] = $item['title'];
		$data['avatar'] = tomedia($item['avatar']);
		if($i == $deliveryer_id) {
			$records_mine = $data;
		}
		$records[] = $data;
	}
	$sort_type = trim($extra['sort_type']);
	//$sort_type = trim($_GPC['sort_type']) ? trim($_GPC['sort_type']) : 'total_success_order';
	$orderby = SORT_DESC;
	if($sort_type == 'avg_delivery_success_time') {
		$orderby = SORT_ASC;
		foreach($records as $key => $item) {
			if(empty($item['avg_delivery_success_time'])) {
				//处理配送时长升序排序，没有数据的会排在前面
				$record_no_success_time[] = $item;
				unset($records[$key]);
			}
		}
	}
	$records = array_sort($records, $sort_type, $orderby);
	if($sort_type == 'avg_delivery_success_time') {
		$records = array_merge($records, $record_no_success_time);
	}
	$result['mine'] = $records_mine;
	$result['rank'] = $records;
	$rank = 0;
	$result['mine']['rank'] = $rank;
	foreach($result['rank'] as $val) {
		$rank++;
		if($val['deliveryer_id'] == $deliveryer_id) {
			$result['mine']['ranking'] = $rank;
		}
	}
	return $result;
}
